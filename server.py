import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.markdown import hitalic, hbold, hunderline, hlink
from config import token
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold
from services.coin_rate.crypto_course import get_crypto_course
from services.news.news import get_list_news

logging.basicConfig(level=logging.INFO)

bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome_message(message: types.Message):
    start_buttons = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üìë", "–¢–æ–ø 3 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã üí∏"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)
    with open('services/start_message.txt', 'r') as file:
        start_message = file.read()
    await message.answer(text=start_message, reply_markup=keyboard)


@dp.message_handler(Text(equals="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üìë"))
async def get_news(message: types.Message):
    await message.answer(text='–°–æ–±–∏—Ä–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –≤–∞—Å...')
    news_list = get_list_news()
    for source_news in news_list:
        for element in source_news.news:
            now_time = f"–°–µ–≥–æ–¥–Ω—è –≤ {element.publication_time.strftime('%H:%M')}"
            today = element.publication_time.strftime("%d-%m-%Y") == datetime.today().strftime("%d-%m-%Y")
            news_data = \
                f'–ò—Å—Ç–æ—á–Ω–∏–∫: {source_news.name_source} \n' \
                f'{hitalic(f"–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")} {now_time if today else element.publication_time} \n' \
                f'{hunderline("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:")}' \
                f'{element.description} \n' \
                f'{hlink("–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ", element.link_news)}'
            await message.answer(news_data)


@dp.message_handler(Text(equals="–¢–æ–ø 3 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã üí∏"))
async def get_crypto(message: types.Message):
    await message.answer(text='–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ –¥–ª—è –≤–∞—Å...')
    crypto_list = get_crypto_course()
    for coin in crypto_list:
        for element in coin.info:
            result = \
                f'{hbold(coin.name)} >>> {element.price}$ \n' \
                f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ : {element.changes_24_hours}'
            await message.answer(result)


if __name__ == '__main__':
    executor.start_polling(dp)
